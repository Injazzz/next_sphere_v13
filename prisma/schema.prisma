// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
}

enum TeamRole {
  LEADER
  MEMBER
}

enum DocumentType {
  SPK
  JO
  BA
  IS
  SA
  INVOICE
}

enum DocumentFlow {
  IN
  OUT
}

enum DocumentStatus {
  DRAFT
  ACTIVE
  WARNING
  OVERDUE
  COMPLETED
  APPROVED
}

model Client {
  id             String   @id @default(uuid())
  email          String   @unique
  name           String
  gender         Gender
  phone          String
  token          String?  @unique
  companyName    String
  companyEmail   String
  companyAddress String?
  createdById    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  sessionToken   String?  @unique

  user     User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
  Document Document[]

  @@map("clients")
}

model Team {
  id              String           @id @default(uuid())
  name            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  members         TeamMember[]
  teamInviteToken TeamInvitation[]
  Document        Document[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(uuid())
  teamId   String
  userId   String
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model TeamInvitation {
  id        String   @id @default(uuid())
  teamId    String
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
  @@map("team_invitations")
}

model Document {
  id           String             @id @default(uuid())
  isPinned     Boolean            @default(false)
  title        String
  type         DocumentType
  flow         DocumentFlow
  status       DocumentStatus     @default(DRAFT)
  description  String?
  startTrackAt DateTime
  endTrackAt   DateTime
  completedAt  DateTime?
  approvedAt   DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  createdById  String
  clientId     String
  files        DocumentFile[]
  responseFile DocumentResponse[]
  teamId       String?

  createdBy User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  client    Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  team      Team?  @relation(fields: [teamId], references: [id], onDelete: SetNull)

  @@map("documents")
}

model DocumentFile {
  id         String   @id @default(cuid())
  name       String
  url        String
  size       Int
  encrypted  Boolean  @default(false)
  iv         String?
  documentId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_files")
}

model DocumentResponse {
  id         String   @id @default(uuid())
  name       String
  url        String
  size       Int
  encrypted  Boolean  @default(false)
  iv         String?
  documentId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_responses")
}

model User {
  id            String  @id @default(uuid())
  name          String
  email         String  @unique
  emailVerified Boolean
  image         String?

  createdAt DateTime
  updatedAt DateTime

  sessions          Session[]
  accounts          Account[]
  teams             TeamMember[]
  hasCreatedClients Client[]
  documents         Document[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String

  createdAt DateTime
  updatedAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  createdAt DateTime
  updatedAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verifications")
}
